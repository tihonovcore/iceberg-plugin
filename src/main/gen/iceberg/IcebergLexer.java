// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Iceberg.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package iceberg;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import iceberg.psi.IcebergTypes;


class IcebergLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\2\22\0\1\1\1\3"+
    "\6\0\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\11\15\1\16\1\17\1\20\1\21\1\22"+
    "\2\0\32\23\4\0\1\23\1\0\1\24\1\23\1\25"+
    "\1\26\1\27\1\30\1\23\1\31\1\32\2\23\1\33"+
    "\1\34\1\35\1\36\1\37\1\23\1\40\1\41\1\42"+
    "\1\43\1\23\1\44\3\23\1\45\1\0\1\46\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\1\20\15\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\6\21\1\31\4\21\1\32\5\21\1\33"+
    "\1\21\1\34\2\21\1\35\1\21\1\36\1\37\10\21"+
    "\1\40\2\21\1\41\2\21\1\42\1\43\1\44\1\21"+
    "\1\45\1\46\1\21\1\47\1\21\1\50\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\47\0\47\0\47\0\47"+
    "\0\47\0\234\0\47\0\303\0\47\0\352\0\47\0\47"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\47\0\47\0\47\0\u0381\0\47\0\47\0\47\0\u03a8"+
    "\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0186\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u0186\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca"+
    "\0\u0186\0\u05f1\0\u0186\0\u0618\0\u063f\0\u0186\0\u0666\0\u0186"+
    "\0\u0186\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u0186\0\u07c5\0\u07ec\0\u0186\0\u0813\0\u083a\0\u0186"+
    "\0\u0186\0\u0186\0\u0861\0\u0186\0\u0186\0\u0888\0\u0186\0\u08af"+
    "\0\u0186\0\u0186\0\u0186";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\24\1\32\2\24\1\33\1\34\1\35\1\36\1\24"+
    "\1\37\1\24\1\40\1\41\1\42\50\0\2\3\65\0"+
    "\1\43\42\0\1\16\44\0\1\44\47\0\2\16\52\0"+
    "\1\45\46\0\1\46\46\0\1\47\41\0\2\24\5\0"+
    "\22\24\16\0\2\24\5\0\12\24\1\50\7\24\16\0"+
    "\2\24\5\0\10\24\1\51\11\24\16\0\2\24\5\0"+
    "\4\24\1\52\15\24\16\0\2\24\5\0\10\24\1\53"+
    "\11\24\16\0\2\24\5\0\1\24\1\54\16\24\1\55"+
    "\1\24\16\0\2\24\5\0\5\24\1\56\3\24\1\57"+
    "\10\24\16\0\2\24\5\0\4\24\1\60\6\24\1\61"+
    "\4\24\1\62\1\24\16\0\2\24\5\0\15\24\1\63"+
    "\4\24\16\0\2\24\5\0\15\24\1\64\4\24\16\0"+
    "\2\24\5\0\4\24\1\65\15\24\16\0\2\24\5\0"+
    "\6\24\1\66\6\24\1\67\4\24\16\0\2\24\5\0"+
    "\6\24\1\70\13\24\2\0\2\44\1\0\44\44\14\0"+
    "\2\24\5\0\3\24\1\71\16\24\16\0\2\24\5\0"+
    "\1\24\1\72\20\24\16\0\2\24\5\0\5\24\1\73"+
    "\14\24\16\0\2\24\5\0\16\24\1\74\3\24\16\0"+
    "\2\24\5\0\10\24\1\75\11\24\16\0\2\24\5\0"+
    "\12\24\1\76\7\24\16\0\2\24\5\0\14\24\1\77"+
    "\5\24\16\0\2\24\5\0\21\24\1\100\16\0\2\24"+
    "\5\0\17\24\1\101\2\24\16\0\2\24\5\0\10\24"+
    "\1\102\11\24\16\0\2\24\5\0\7\24\1\103\12\24"+
    "\16\0\2\24\5\0\17\24\1\104\2\24\16\0\2\24"+
    "\5\0\4\24\1\105\2\24\1\106\12\24\16\0\2\24"+
    "\5\0\20\24\1\107\1\24\16\0\2\24\5\0\7\24"+
    "\1\110\12\24\16\0\2\24\5\0\16\24\1\111\3\24"+
    "\16\0\2\24\5\0\4\24\1\112\15\24\16\0\2\24"+
    "\5\0\16\24\1\113\3\24\16\0\2\24\5\0\13\24"+
    "\1\114\6\24\16\0\2\24\5\0\10\24\1\115\11\24"+
    "\16\0\2\24\5\0\12\24\1\116\7\24\16\0\2\24"+
    "\5\0\20\24\1\117\1\24\16\0\2\24\5\0\12\24"+
    "\1\120\7\24\16\0\2\24\5\0\16\24\1\121\3\24"+
    "\16\0\2\24\5\0\4\24\1\122\15\24\16\0\2\24"+
    "\5\0\10\24\1\123\11\24\16\0\2\24\5\0\16\24"+
    "\1\124\3\24\16\0\2\24\5\0\4\24\1\125\15\24"+
    "\16\0\2\24\5\0\15\24\1\126\4\24\16\0\2\24"+
    "\5\0\17\24\1\127\2\24\16\0\2\24\5\0\15\24"+
    "\1\130\4\24\16\0\2\24\5\0\4\24\1\131\15\24"+
    "\16\0\2\24\5\0\17\24\1\132\2\24\16\0\2\24"+
    "\5\0\12\24\1\133\7\24\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2262];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\5\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\20\1\3\11\1\1\3\11\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[91];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IcebergLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 43: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 44: break;
          case 3:
            { return IcebergTypes.OPEN_PARENTHESIS;
            }
          // fall through
          case 45: break;
          case 4:
            { return IcebergTypes.CLOSE_PARENTHESIS;
            }
          // fall through
          case 46: break;
          case 5:
            { return IcebergTypes.STAR;
            }
          // fall through
          case 47: break;
          case 6:
            { return IcebergTypes.PLUS;
            }
          // fall through
          case 48: break;
          case 7:
            { return IcebergTypes.COMMA;
            }
          // fall through
          case 49: break;
          case 8:
            { return IcebergTypes.MINUS;
            }
          // fall through
          case 50: break;
          case 9:
            { return IcebergTypes.DOT;
            }
          // fall through
          case 51: break;
          case 10:
            { return IcebergTypes.SLASH;
            }
          // fall through
          case 52: break;
          case 11:
            { return IcebergTypes.NUMBER;
            }
          // fall through
          case 53: break;
          case 12:
            { return IcebergTypes.COLON;
            }
          // fall through
          case 54: break;
          case 13:
            { return IcebergTypes.SEMICOLON;
            }
          // fall through
          case 55: break;
          case 14:
            { return IcebergTypes.LT;
            }
          // fall through
          case 56: break;
          case 15:
            { return IcebergTypes.ASSIGN;
            }
          // fall through
          case 57: break;
          case 16:
            { return IcebergTypes.GT;
            }
          // fall through
          case 58: break;
          case 17:
            { return IcebergTypes.ID;
            }
          // fall through
          case 59: break;
          case 18:
            { return IcebergTypes.OPEN_BRACE;
            }
          // fall through
          case 60: break;
          case 19:
            { return IcebergTypes.CLOSE_BRACE;
            }
          // fall through
          case 61: break;
          case 20:
            { return IcebergTypes.NEQ;
            }
          // fall through
          case 62: break;
          case 21:
            { return IcebergTypes.COMMENT;
            }
          // fall through
          case 63: break;
          case 22:
            { return IcebergTypes.LE;
            }
          // fall through
          case 64: break;
          case 23:
            { return IcebergTypes.EQ;
            }
          // fall through
          case 65: break;
          case 24:
            { return IcebergTypes.GE;
            }
          // fall through
          case 66: break;
          case 25:
            { return IcebergTypes.IF;
            }
          // fall through
          case 67: break;
          case 26:
            { return IcebergTypes.OR;
            }
          // fall through
          case 68: break;
          case 27:
            { return IcebergTypes.AND;
            }
          // fall through
          case 69: break;
          case 28:
            { return IcebergTypes.DEF;
            }
          // fall through
          case 70: break;
          case 29:
            { return IcebergTypes.FUN;
            }
          // fall through
          case 71: break;
          case 30:
            { return IcebergTypes.NEW;
            }
          // fall through
          case 72: break;
          case 31:
            { return IcebergTypes.NOT;
            }
          // fall through
          case 73: break;
          case 32:
            { return IcebergTypes.ELSE;
            }
          // fall through
          case 74: break;
          case 33:
            { return IcebergTypes.NULL;
            }
          // fall through
          case 75: break;
          case 34:
            { return IcebergTypes.THEN;
            }
          // fall through
          case 76: break;
          case 35:
            { return IcebergTypes.THIS;
            }
          // fall through
          case 77: break;
          case 36:
            { return IcebergTypes.TRUE;
            }
          // fall through
          case 78: break;
          case 37:
            { return IcebergTypes.CLASS;
            }
          // fall through
          case 79: break;
          case 38:
            { return IcebergTypes.FALSE;
            }
          // fall through
          case 80: break;
          case 39:
            { return IcebergTypes.PRINT;
            }
          // fall through
          case 81: break;
          case 40:
            { return IcebergTypes.WHILE;
            }
          // fall through
          case 82: break;
          case 41:
            { return IcebergTypes.IMPORT;
            }
          // fall through
          case 83: break;
          case 42:
            { return IcebergTypes.RETURN;
            }
          // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
