{
  parserClass="iceberg.parser.IcebergParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Iceberg"
  psiImplClassSuffix="Impl"
  psiPackage="iceberg.psi"
  psiImplPackage="iceberg.psi.impl"

  elementTypeHolderClass="iceberg.psi.IcebergTypes"
  elementTypeClass="iceberg.psi.IcebergElementType"
  tokenTypeClass="iceberg.psi.IcebergTokenType"
}

file
  ::= dependency* statement*

dependency
  ::= IMPORT ID (DOT ID)* SEMICOLON

statement
  ::= (printStatement SEMICOLON) | COMMENT

//statement
//  : expression SEMICOLON
//  | printStatement SEMICOLON
//  | defStatement SEMICOLON
//  | ifStatement
//  | whileStatement
//  | functionDefinitionStatement
//  | classDefinitionStatement
//  | returnStatement SEMICOLON
//  | block
//  ;

printStatement
  ::= PRINT expression

//defStatement
//  : DEF name=ID
//  ( COLON type=ID (ASSIGN expression)?
//  | ASSIGN expression
//  );
//
//ifStatement
//  : IF condition=expression
//    THEN thenStatement=statement
//    (ELSE elseStatement=statement)?
//  ;
//
//whileStatement
//  : WHILE expression THEN statement
//  ;
//
//classDefinitionStatement
//  : CLASS name=ID OPEN_BRACE fieldDefinition* functionDefinitionStatement* CLOSE_BRACE
//  ;
//
//fieldDefinition
//  : DEF name=ID COLON type=ID (ASSIGN expression)?
//  ;
//
//functionDefinitionStatement
//  : FUN name=ID OPEN_PARENTHESIS parameters CLOSE_PARENTHESIS
//    (COLON returnType=ID)? block
//  ;
//
//parameters
//  : ((parameter COMMA)* parameter)?
//  ;
//
//parameter : name=ID COLON type=ID;
//
//functionCall
//  : name=ID OPEN_PARENTHESIS arguments CLOSE_PARENTHESIS
//  ;
//
//arguments
//  : ((expression COMMA)* expression)?
//  ;
//
//returnStatement
//  : RETRUN expression?
//  ;
//
//block : OPEN_BRACE statement* CLOSE_BRACE;

//expression
//  : NEW className=ID                                      #newExpression
//  | NOT atom                                              #negateExpression
//  | MINUS atom                                            #unaryMinusExpression
//  | expression DOT  (ID | functionCall)                   #memberExpression
//  | left=expression (STAR | SLASH)      right=expression  #multiplicationExpression
//  | left=expression (PLUS | MINUS)      right=expression  #additionExpression
//  | left=expression (LE | GE | LT | GT) right=expression  #relationalExpression
//  | left=expression (EQ | NEQ)          right=expression  #equalityExression
//  | left=expression AND                 right=expression  #logicalAndExpression
//  | left=expression OR                  right=expression  #logicalOrExpression
//  | left=expression ASSIGN              right=expression  #assignExpression
//  | atom                                                  #atomExpression
//  ;
//
//atom
//  : OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
//  | functionCall
//  | NUMBER
//  | FALSE
//  | TRUE
//  | STRING
//  | ID
//  | THIS
//  ;

expression
  ::= term ((PLUS | MINUS) term)*

term
  ::= factor ((STAR | SLASH) factor)*

factor
  ::= atom

//  | left=expression (PLUS | MINUS)      right=expression  #additionExpression
//  | left=expression (LE | GE | LT | GT) right=expression  #relationalExpression
//  | left=expression (EQ | NEQ)          right=expression  #equalityExression
//  | left=expression AND                 right=expression  #logicalAndExpression
//  | left=expression OR                  right=expression  #logicalOrExpression
//  | left=expression ASSIGN              right=expression  #assignExpression
//  | atom                                                  #atomExpression
//  ;

atom ::= NUMBER|FALSE|TRUE|NULL|COMMENT|ID